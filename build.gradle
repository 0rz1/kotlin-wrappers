plugins {
    id "org.jetbrains.kotlin.multiplatform" version "$kotlin_version" apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version" apply false
    id "org.jetbrains.kotlin.js" version "$kotlin_version" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version" apply false
}

group 'org.jetbrains'
version '1.0-SNAPSHOT'

subprojects {
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-js-wrappers" }
    }

    def projectName = name

    plugins.withType(org.jetbrains.kotlin.gradle.plugin.KotlinJsPluginWrapper) {
        kotlin {
            target  {
                useCommonJs()
            }
        }

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
        }

        compileKotlinJs {
            kotlinOptions {
                outputFile = "$projectDir/build/classes/main/${projectName}.js"
                moduleKind = "commonjs"
                sourceMap = true
                sourceMapEmbedSources = "always"
            }
        }
        compileKotlinJsIr {
            kotlinOptions {
                moduleKind = "commonjs"
                sourceMap = false
            }
        }
    }

    ext.configurePublishingWithNPM = {
        apply plugin: "publishing-conventions"

        task processPkg(type: Copy) {
            from '.'
            into 'build/npm'
            include 'package.json'
            expand(
                    css_version: "$css_version",
                    kotlin_version: "$kotlin_version",
                    kotlinext_version: "$kotlinext_version",
                    mocha_version: "$mocha_version",
                    react_version: "$react_version",
                    react_dom_version: "$react_dom_version",
                    react_redux_version: "$react_redux_version",
                    react_router_dom_version: "$react_router_dom_version",
                    redux_version: "$redux_version",
                    styled_version: "$styled_version"
            )
        }

        task prepublish(type: Copy) {
            from '.'
            into 'build/npm'
            exclude 'package.json'
            exclude 'build/npm'
        }

        npm_publish {
            args = ['--access', 'public']
            execOverrides {
                it.workingDir = 'build/npm'
            }
        }

        npm_publish.dependsOn prepublish
        npm_publish.dependsOn processPkg
        prepublish.dependsOn build
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
