group 'org.jetbrains'
version '1.0-SNAPSHOT'

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

buildscript {
    apply from: 'versions.gradle'

    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.github.node-gradle:gradle-node-plugin:$node_plugin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
    }
}

subprojects {
    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        jcenter()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-js-wrappers"
        }
    }

    def projectName = name

    ext.applyKotlinJS = {
        apply plugin: 'org.jetbrains.kotlin.js'

        kotlin {
            target  {
                useCommonJs()
            }
        }

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            compile "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
        }

        compileKotlinJs {
            kotlinOptions {
                outputFile = "$projectDir/build/classes/main/${projectName}.js"
                moduleKind = "commonjs"
                sourceMap = true
                sourceMapEmbedSources = "always"
            }
        }
        compileKotlinJsIr {
            kotlinOptions {
                moduleKind = "commonjs"
                sourceMap = false
            }
        }
    }

    ext.configurePublishing = { baseVersion ->
        apply plugin: 'com.github.node-gradle.node'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'maven-publish'

        artifacts {
            if (kotlin instanceof org.jetbrains.kotlin.gradle.dsl.KotlinJsProjectExtension) {
                archives JsSourcesJar
            } else if (kotlin instanceof org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension) {
                archives jvmSourcesJar
                archives jsSourcesJar
            } else {
                archives kotlinSourcesJar
            }
        }

        def v = "$baseVersion-kotlin-$kotlin_version"
        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')
            publish = true
            pkg {
                repo = 'kotlin-js-wrappers'
                name = projectName
                userOrg = 'kotlin'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/JetBrains/kotlin-wrappers.git'
                version {
                    name = v
                }
            }
            def publication
            if (kotlin instanceof org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension) {
                publication = 'metadata'
            } else {
                publication = 'Publication'
            }
            publications = [publication]
        }

        publishing {
            publications {
                if (kotlin instanceof org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension) {
                    all {
                        if (name == "metadata") {
                            groupId 'org.jetbrains'
                            artifactId "$projectName"
                            version v
                        }
                    }
                } else {
                    Publication(MavenPublication) {
                        from components.kotlin
                        groupId 'org.jetbrains'
                        artifactId projectName
                        version v

                        if (kotlin instanceof org.jetbrains.kotlin.gradle.dsl.KotlinJsProjectExtension) {
                            artifact JsSourcesJar
                        } else {
                            artifact kotlinSourcesJar
                        }
                    }
                }
            }
        }
    }

    ext.configurePublishingWithNPM = { baseVersion ->
        configurePublishing(baseVersion)

        task processPkg(type: Copy) {
            from '.'
            into 'build/npm'
            include 'package.json'
            expand(
                    css_version: "$css_version",
                    kotlin_version: "$kotlin_version",
                    kotlinext_version: "$kotlinext_version",
                    mocha_version: "$mocha_version",
                    react_version: "$react_version",
                    react_dom_version: "$react_dom_version",
                    react_redux_version: "$react_redux_version",
                    react_router_dom_version: "$react_router_dom_version",
                    redux_version: "$redux_version",
                    styled_version: "$styled_version"
            )
        }

        task prepublish(type: Copy) {
            from '.'
            into 'build/npm'
            exclude 'package.json'
            exclude 'build/npm'
        }

        npm_publish {
            args = ['--access', 'public']
            execOverrides {
                it.workingDir = 'build/npm'
            }
        }

        npm_publish.dependsOn prepublish
        npm_publish.dependsOn processPkg
        prepublish.dependsOn build
    }
}
